#! /bin/bash

#
# Main functions
#

function try_wget {
  wget -q --tries=5 --timeout=30 --spider "${1}" > /dev/null
}
export -f try_wget

function try_curl {
  curl -ILs --retry 5 --retry-connrefused "${1}" > /dev/null
}
export -f try_curl

function test_url {
  local version
  local url
  local urls
  local tmp
  local key="${1}"
  local is_good=true

  IFS='.' read -r -a version <<< "${TEST["${key}"]}"
  IFS=' ' read -r -a urls <<< "${URL["${key}"]}"
  for tmp in "${urls[@]}"; do
    url="${tmp}"
    if [ "${#version[@]}" -eq 3 ]; then
      url="${url//MAJOR/${version[0]}}"
      url="${url//MINOR/${version[1]}}"
      url="${url//PATCH/${version[2]}}"
    elif [ "${#version[@]}" -eq 2 ]; then
      url="${url//MAJOR/${version[0]}}"
      url="${url//MINOR/${version[1]}}"
      url="${url//.PATCH/}"
    elif [ "${#version[@]}" -eq 1 ]; then
      url="${url//MAJOR/${version[0]}}"
      url="${url//.MINOR/}"
      url="${url//.PATCH/}"
    fi
    if try_curl "${url}"; then
      show_success "${key}: ${url}"
    else
      show_error "${key}: ${url}"
      is_good=false
    fi
  done

  "${is_good}" && return || return 1
}
export -f test_url

function test_parser {
  local version
  local key="${1}"
  local cmd

  cmd="${CMD["${key}"]}"
  if version="$(eval "${cmd}" 2> /dev/null | parse_version)"; then
    if ! [[ "${version}" =~ ^[0-9]+(\.[0-9]+)?(\.[0-9]+)?(\.[0-9]+)?(\.[0-9]+)?$ ]]; then
      show_error "✗ ${key}"
      return 1
    else
      show_success "✓ ${key}"
      return 0
    fi
  else
    if command -v "${key%% *}" > /dev/null; then
      show_error "✗ ${key}"
      return 1
    else
      show_warning "？${key}"
      return 0
    fi
  fi
}
export -f test_parser

function parse_version {
  grep "[0-9]\+\(\.[0-9]\+\)\?\(\.[0-9]\+\)\?" |
    sed -n "s/^\([^0-9]*\s\?v\?n\?\)\?\([0-9]\+\)\(\.[0-9]\+\)\?\(\.[0-9]\+\)\?.*/\2\3\4/p" |
    head -n 1
}
export -f parse_version

function parse_year {
  sed -n "s,.*\(20[0-9]\{2\}\).*,\1,p" | head -n 1
}
export -f parse_year

function download_wrapper {
  local bin="${1}"
  local cmd
  local version
  local year
  local _version
  local url
  local urls
  local idx

  if ! [[ -v CMD[${bin}] ]]; then
    show_warning "${bin@Q} not supported. Skipping."
    return
  fi
  cmd="${CMD[${bin}]}"

  IFS='.' read -r -a version <<< "$(eval "${cmd}" 2> /dev/null | parse_version)"
  if [ "${#version[@]}" -eq 0 ]; then
    show_warning "${bin@Q} not installed. Skipping."
    return
  fi

  year="$(eval "${cmd}" 2> /dev/null | parse_year)"

  IFS=' ' read -r -a urls <<< "${URL["${bin}"]}"
  echo "downloading ${bin@Q}"
  for idx in "${!urls[@]}"; do
    url="${urls["${idx}"]}"
    if [ "${#version[@]}" -eq 3 ]; then
      _version="${version[0]}.${version[1]}.${version[2]}"
      url="${url//MAJOR/${version[0]}}"
      url="${url//MINOR/${version[1]}}"
      url="${url//PATCH/${version[2]}}"
    elif [ "${#version[@]}" -eq 2 ]; then
      _version="${version[0]}.${version[1]}"
      url="${url//MAJOR/${version[0]}}"
      url="${url//MINOR/${version[1]}}"
      url="${url//.PATCH/}"
    elif [ "${#version[@]}" -eq 1 ]; then
      _version="${version[0]}"
      url="${url//MAJOR/${version[0]}}"
      url="${url//.MINOR/}"
      url="${url//.PATCH/}"
    fi
    if ! [[ "${url}" =~ ${_version} ]]; then
      if [[ "${url}" =~ /latest/ ]]; then
        _version="latest"
      elif [[ "${url}" =~ /stable/ ]]; then
        _version="stable"
      else
        _version="unknown"
      fi
    fi
    if [[ "${url}" =~ YEAR ]] && [ -n "${year[*]}" ]; then
      url="${url//YEAR/${year[0]}}"
    fi
    echo "${url@Q}"
    if [[ ${url:${#url}-1:1} = "/" ]]; then
      IFS="."
      if [[ "${url:${#url}-4:4}" = "pdf/" ]]; then
        if [ "${#urls[@]}" -gt 1 ]; then
          curl -# -C - -o "${bin}-${_version[*]}-${idx}.pdf" "${url}"
        else
          curl -# -C - -o "${bin}-${_version[*]}.pdf" "${url}"
        fi
      elif [[ "${url:${#url}-8:8}" = "htmlzip/" ]]; then
        if [ "${#urls[@]}" -gt 1 ]; then
          curl -# -C - -o "${bin}-${_version[*]}-${idx}.zip" "${url}"
        else
          curl -# -C - -o "${bin}-${_version[*]}.zip" "${url}"
        fi
      else
        if [ "${#urls[@]}" -gt 1 ]; then
          curl -# -C - -o "${bin}-${_version[*]}-${idx}.html" "${url}"
        else
          curl -# -C - -o "${bin}-${_version[*]}.html" "${url}"
        fi
      fi
    else
      curl -#O -C - "${url}"
    fi
  done
  echo
}
export -f download_wrapper

#
# Utility functions
#

show_error() {
  local red=$'\033[0;91m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${red}${*:2}${nc}" 1>&2
  else
    echo -e "${red}${*}${nc}" 1>&2
  fi
}
export -f show_error

show_info() {
  local green=$'\033[0;92m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${green}${*:2}${nc}"
  else
    echo -e "${green}${*}${nc}"
  fi
}
export -f show_info

show_warning() {
  local yellow=$'\033[0;93m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${yellow}${*:2}${nc}"
  else
    echo -e "${yellow}${*}${nc}"
  fi
}
export -f show_warning

show_question() {
  local blue=$'\033[0;94m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${blue}${*:2}${nc}"
  else
    echo -e "${blue}${*}${nc}"
  fi
}
export -f show_question

ask_question() {
  local blue=$'\033[0;94m'
  local nc=$'\033[0m'
  local var
  read -r -p "${blue}$*${nc} " var
  echo "${var}"
}
export -f ask_question

ask_secret() {
  local blue=$'\033[0;94m'
  local nc=$'\033[0m'
  local var
  stty -echo echonl
  read -r -p "${blue}$*${nc} " var
  stty echo -echonl
  echo "${var}"
}
export -f ask_secret

show_success() {
  local purple=$'\033[0;95m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${purple}${*:2}${nc}"
  else
    echo -e "${purple}${*}${nc}"
  fi
}
export -f show_success

show_header() {
  local cyan=$'\033[0;96m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${cyan}${*:2}${nc}"
  else
    echo -e "${cyan}${*}${nc}"
  fi
}
export -f show_header

show_listitem() {
  local white=$'\033[0;97m'
  local nc=$'\033[0m'
  if [[ "${1:--e}" =~ ^(-e|-n)$ ]]; then
    echo "${1:--e}" "${white}${*:2}${nc}"
  else
    echo -e "${white}${*}${nc}"
  fi
}
export -f show_listitem

check_command() {
  local package
  local missing=()
  for package in "${@}"; do
    if ! command -v "${package}" > /dev/null; then
      missing+=("${package}")
    fi
  done
  if [ ${#missing[@]} -eq 0 ]; then
    return 0
  else
    show_error "MISSING: ${missing[*]@Q} not installed."
    return 1
  fi
}
export -f check_command
